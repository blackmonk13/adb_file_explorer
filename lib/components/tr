class TreeViewItem with Diagnosticable {
  final Key? key;

  /// The item leading
  ///
  /// Usually an [Icon]
  final Widget? leading;

  /// The item content
  ///
  /// Usually a [Text]
  final Widget content;

  /// An optional/arbitrary value associated with the item.
  ///
  /// For example, a primary key of the row of data that this
  /// item is associated with.
  final dynamic value;

  /// The children of this item.
  final List<TreeViewItem> children;

  /// Whether the item can be collapsable by user-input or not.
  ///
  /// Defaults to `true`
  final bool collapsable;

  TreeViewItem? _parent;

  /// Whether the item has any siblings (including itself) that are expandable
  bool _anyExpandableSiblings;

  /// [TreeViewItem] that owns the [children] collection that this node is part
  /// of.
  ///
  /// If null, this is the root node
  TreeViewItem? get parent => _parent;

  /// Whether the current item is expanded.
  ///
  /// It has no effect if [children] is empty.
  bool expanded;

  /// Whether the current item is selected.
  ///
  /// If [TreeView.selectionMode] is [TreeViewSelectionMode.none], this has no
  /// effect. If it's [TreeViewSelectionMode.single], this item is going to be
  /// the only selected item. If it's [TreeViewSelectionMode.multiple], this
  /// item is going to be one of the selected items
  bool? selected;

  /// Called when this item is invoked
  ///
  /// This item is passed to the callback.
  ///
  /// This callback is executed __after__ the global
  /// [TreeView.onItemInvoked]-callback.
  final Future<void> Function(
      TreeViewItem item, TreeViewItemInvokeReason reason)? onInvoked;

  /// Called when this item's expansion state is toggled.
  ///
  /// This item and its future expand state are passed to the callback.
  ///
  /// This callback is executed __after__ the global
  /// [TreeView.onItemExpandToggle]-callback.
  final Future<void> Function(TreeViewItem item, bool getsExpanded)?
      onExpandToggle;

  /// The background color of this item.
  ///
  /// See also:
  ///
  ///   * [ButtonThemeData.uncheckedInputColor], which is used by default
  final ButtonState<Color>? backgroundColor;

  /// Whether this item is visible or not. Used to not lose the item state while
  /// it's not on the screen
  bool _visible = true;

  /// {@macro flutter.widgets.Focus.autofocus}
  final bool autofocus;

  /// {@macro flutter.widgets.Focus.focusNode}
  final FocusNode focusNode;

  /// {@macro fluent_ui.controls.inputs.HoverButton.semanticLabel}
  final String? semanticLabel;

  /// Whether the tree view item is loading
  bool loading = false;

  /// Widget to show when [loading]
  ///
  /// If null, [TreeView.loadingWidget] is used instead
  final Widget? loadingWidget;

  /// Whether this item children is loaded lazily
  final bool lazy;

  /// Creates a tab view item
  TreeViewItem({
    this.key,
    this.leading,
    required this.content,
    this.value,
    this.children = const [],
    this.collapsable = true,
    bool? expanded,
    this.selected = false,
    this.onInvoked,
    this.onExpandToggle,
    this.backgroundColor,
    this.autofocus = false,
    FocusNode? focusNode,
    this.semanticLabel,
    this.loadingWidget,
    this.lazy = false,
  })  : expanded = expanded ?? children.isNotEmpty,
        _anyExpandableSiblings = false,
        focusNode = focusNode ?? FocusNode();

  /// Deep copy constructor that can be used to copy an item and all of
  /// its child items. Useful if you want to have multiple trees with the
  /// same items, but with different UX states (e.g., selection, visibility,
  /// etc.).
  TreeViewItem.from(TreeViewItem source)
      : this(
          key: source.key,
          leading: source.leading,
          content: source.content,
          value: source.value,
          children: source.children.map((i) => TreeViewItem.from(i)).toList(),
          collapsable: source.collapsable,
          expanded: source.expanded,
          selected: source.selected,
          onInvoked: source.onInvoked,
          onExpandToggle: source.onExpandToggle,
          backgroundColor: source.backgroundColor,
          autofocus: source.autofocus,
          focusNode: source.focusNode,
          semanticLabel: source.semanticLabel,
          loadingWidget: source.loadingWidget,
          lazy: source.lazy,
        );

  /// Whether this node is expandable
  bool get isExpandable {
    return lazy || children.isNotEmpty;
  }

  /// Indicates how far from the root node this child node is.
  ///
  /// If this is the root node, the depth is 0
  int get depth {
    if (parent != null) {
      int count = 1;
      TreeViewItem? currentParent = parent!;
      while (currentParent?.parent != null) {
        count++;
        currentParent = currentParent?.parent;
      }

      return count;
    }

    return 0;
  }

  /// Gets the last parent in the tree, in decrescent order.
  ///
  /// If this is the root parent, [this] is returned
  TreeViewItem get lastParent {
    if (parent != null) {
      TreeViewItem currentParent = parent!;
      while (currentParent.parent != null) {
        if (currentParent.parent != null) currentParent = currentParent.parent!;
      }
      return currentParent;
    }
    return this;
  }

  /// Executes [callback] for every parent found in the tree
  void executeForAllParents(ValueChanged<TreeViewItem?> callback) {
    if (parent == null) return;
    TreeViewItem? currentParent = parent!;
    callback(currentParent);
    while (currentParent?.parent != null) {
      currentParent = currentParent?.parent;
      callback(currentParent);
    }
  }

  /// Changes the selection state for this item and all of its children
  /// to either all selected or all deselected. Also appropriately updates
  /// the selection state of this item's parents as required. This should not
  /// be used for an item that belongs to a [TreeView] in single selection
  /// mode. See also [TreeView.deselectParentWhenChildrenDeselected].
  void setSelectionStateForMultiSelectionMode(
      bool newSelectionState, bool deselectParentWhenChildrenDeselected) {
    selected = newSelectionState;
    children.executeForAll((item) {
      item.selected = newSelectionState;
    });
    executeForAllParents(
        (p) => p?.updateSelected(deselectParentWhenChildrenDeselected));
  }

  /// Updates [selected] based on the direct [children]s' state.
  /// [selected] will not be forced to false if
  /// `deselectParentWhenChildrenDeselected` is false and
  /// either there are no children or all children are deselected.
  ///
  /// Since this only updates the state based on direct children,
  /// you would normally only call this in a depth-first manner on
  /// all parents, for example:
  ///
  /// ```dart
  /// item.executeForAllParents((parent) => parent
  ///   ?.updateSelected(widget.deselectParentWhenChildrenDeselected))
  /// ```
  void updateSelected(bool deselectParentWhenChildrenDeselected) {
    bool hasNull = false;
    bool hasFalse = false;
    bool hasTrue = false;

    for (final child in children) {
      if (child.selected == null) {
        hasNull = true;
      } else if (child.selected == false) {
        hasFalse = true;
      } else if (child.selected == true) {
        hasTrue = true;
      }
    }

    if (!deselectParentWhenChildrenDeselected &&
        (children.isEmpty || (!hasNull && hasFalse && !hasTrue))) {
      if (selected == null && children.isEmpty) {
        // should not be possible unless children were removed after the
        // selected was updated previously...
        selected = true;
      } else if (selected == true) {
        // we're now only in a partially selected state
        selected = null;
      }
    } else {
      selected = hasNull || (hasTrue && hasFalse) ? null : hasTrue;
    }
  }

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties
      ..add(FlagProperty('hasLeading',
          value: leading != null, ifFalse: 'no leading'))
      ..add(FlagProperty('hasChildren',
          value: children.isNotEmpty, ifFalse: 'has children'))
      ..add(FlagProperty('collapsable',
          value: collapsable, defaultValue: true, ifFalse: 'uncollapsable'))
      ..add(FlagProperty('isRootNode',
          value: parent == null, ifFalse: 'has parent'))
      ..add(FlagProperty('expanded',
          value: expanded, defaultValue: true, ifFalse: 'collapsed'))
      ..add(FlagProperty('selected',
          value: selected, defaultValue: false, ifFalse: 'unselected'))
      ..add(FlagProperty('loading',
          value: loading, defaultValue: false, ifFalse: 'not loading'));
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is TreeViewItem &&
        other.key == key &&
        other.leading == leading &&
        other.content == content &&
        other.value == value &&
        listEquals(other.children, children) &&
        other.collapsable == collapsable &&
        other._anyExpandableSiblings == _anyExpandableSiblings &&
        other.selected == selected &&
        other.onInvoked == onInvoked &&
        other.onExpandToggle == onExpandToggle &&
        other.backgroundColor == backgroundColor &&
        other._visible == _visible &&
        other.autofocus == autofocus &&
        other.focusNode == focusNode &&
        other.semanticLabel == semanticLabel &&
        other.loading == loading &&
        other.loadingWidget == loadingWidget &&
        other.lazy == lazy;
  }

  @override
  int get hashCode {
    return key.hashCode ^
        leading.hashCode ^
        content.hashCode ^
        value.hashCode ^
        children.hashCode ^
        collapsable.hashCode ^
        _anyExpandableSiblings.hashCode ^
        selected.hashCode ^
        onInvoked.hashCode ^
        onExpandToggle.hashCode ^
        backgroundColor.hashCode ^
        _visible.hashCode ^
        autofocus.hashCode ^
        focusNode.hashCode ^
        semanticLabel.hashCode ^
        loading.hashCode ^
        loadingWidget.hashCode ^
        lazy.hashCode;
  }
}
